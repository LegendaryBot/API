# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:
  name: LegendaryBotAPI # NOTE: update this with your service name
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  stage: ${env:TRAVIS_BRANCH}
  apiKeys:
    - LegendaryBot-${self:provider.stage}
  environment:
    API_URL: ${self:custom.customDomain.domainName}
    DYNAMODB_TABLE_ITEM: LegendaryBot_item-${self:provider.stage}
    DYNAMODB_TABLE_DISCORD_USER: LegendaryBot_discordUser-${self:provider.stage}
    DYNAMODB_TABLE_DISCORD_GUILD: LegendaryBot_discordGuild-${self:provider.stage}
    US_KEY: ${env:US_KEY_${self:provider.stage}}
    US_SECRET: ${env:US_SECRET_${self:provider.stage}}
    EU_KEY: ${env:EU_KEY_${self:provider.stage}}
    EU_SECRET: ${env:EU_SECRET_${self:provider.stage}}
    TWITTER_KEY: ${env:TWITTER_KEY}
    TWITTER_SECRET: ${env:TWITTER_SECRET}
    WARCRAFTLOGS_KEY: ${env:WARCRAFTLOGS_KEY}
    SENTRY_DSN: ${env:SENTRY_DSN}
    STATS_DIMENSION: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ITEM}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_DISCORD_USER}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_DISCORD_GUILD}"

plugins:
  - serverless-domain-manager
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/legendarybotapi-dev.jar

functions:
  get-character:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetCharacterHandler
    timeout: 15
    events:
      - http:
          path: /character/{region}/{realm}/{character}
          method: get
  get-item:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetItemHandler
    timeout: 15
    events:
      - http:
          path: /item/{region}/{id}
          method: get
  get-lasttweet:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetLastTweetHandler
    timeout: 15
    events:
      - http:
          path: /twitter/{region}
          method: get
  get-legion-building:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetLegionBuildingHandler
    timeout: 15
    events:
      - http:
          path: /legionbuilding/{region}
          method: get
  get-discord-user-main-character:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetDiscordUserMainCharacter
    timeout: 15
    events:
      - http:
          path: /user/{userId}/character/{guildId}
          method: get
  get-discord-user-all-character:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetGuildCharactersForUser
    timeout: 15
    events:
      - http:
          path: /user/{userId}/character/all/{guildName}
          method: get
  set-discord-user-main-character:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSSetDiscordUserMainCharacter
    timeout: 15
    events:
      - http:
          path: /user/{userId}/character/{guildId}/{region}/{realm}/{character}
          method: post
          private: true
  set-raw-character:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSSetRawCharacter
    timeout: 30
    events:
      - http:
          path: /user/rawCharacter
          method: post
          private: true
  get-auth-battlenet:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetOAuthLoginLink
    timeout: 15
    events:
      - http:
          path: /oauth/login/{region}/{id}
          method: get
  get-auth-battlenetcallback:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetBattleNetCallback
    timeout: 30
    events:
      - http:
          path: /oauth/battlenetcallback
          method: get
  get-guild-setting:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetDiscordGuildSetting
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/setting/{key}
          method: get
          private: true
  set-guild-setting:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSSetDiscordGuildSetting
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/setting/{key}
          method: post
          private: true
  set-guild-setting-raw:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSSetDiscordGuildSettingRaw
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/settingRaw
          method: post
          private: true
  delete-guild-setting:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSDeleteDiscordGuildSetting
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/setting/{key}
          method: delete
          private: true
  get-guild-rank-update:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetDiscordGuildRankUpdate
    timeout: 30
    events:
      - http:
          path: /guild/{guildId}/rankUpdate
          method: post
          private: true
  get-realm-status:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetRealmStatus
    timeout: 15
    events:
      - http:
          path: /server/{region}/{realm}/status
          method: get
  get-guild-latest-log:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetGuildLatestLog
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/getLatestLog
          method: get
  add-stats-point:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSAddStatsPoint
    timeout: 15
    events:
      - http:
          path: /stats
          method: post
          private: true
  get-overwatch-stats:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetOverwatchStats
    timeout: 15
    events:
      - http:
          path: /overwatch/{region}/{battletag}
          method: get
  get-guild-raid-rank:
    handler: com.greatmancode.legendarybotapi.impl.aws.AWSGetGuildRaidRank
    timeout: 15
    events:
      - http:
          path: /guild/{guildId}/rank
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_ITEM}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    DynamoDbTable1:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_DISCORD_USER}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    DynamoDbTableGuild:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:provider.environment.DYNAMODB_TABLE_DISCORD_GUILD}
            AttributeDefinitions:
              - AttributeName: id
                AttributeType: N
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
    PubSub:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: ${self:custom.pubsub.url}
            Protocol: https

custom:
  domains:
    prod: api.legendarybot.info
    master: api-dev.legendarybot.info
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: api
    createRoute53Record: false
    endpointType: 'edge'
  pubsub:
    url: "https://api-dev.legendarybot.info" #tempvalue

